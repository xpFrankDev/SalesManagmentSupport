/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panels;

import Clases.Cliente;
import Clases.Conectar;
import Clases.Cotizacion;
import Clases.Despacho;
import Clases.RestarFechas;
import Clases.Solicitud;
import Clases.exportarExcel;
import Ventanas.cargando;
import VentanasRST.Main;
import VentanasRST.listarClientes;
import VentanasRST.listarCotDespacho;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.border.MatteBorder;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author soporte
 */
public class panelBuscarComunicacionesCliente extends javax.swing.JPanel {


    listarCotDespacho lcd;
    
    
    
    // Parametros a usar para el filtrado de Datos
    cargando carga = new cargando();
    static String SQLcliente = "todos";
    static String SQLnumCot = "todos";
    String SQLvendedor = "todos";
    String SQLtipoComunicacion = "todos";
    String SQLfecha1 = "0", SQLfecha2 = "0";

    static Cotizacion c;
    static Cliente cliente;

    public panelBuscarComunicacionesCliente() {
        initComponents();
        actualizarDatos();
        buscarButton.setVisible(false);
        jLabel12.setVisible(false);
        numCot.setVisible(false);
        fecha1.setDatoFecha(new Date());
        fecha2.setDatoFecha(new Date());
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        clienteTxt = new javax.swing.JTextField();
        rSButtonIconShadow1 = new RSMaterialComponent.RSButtonIconShadow();
        jLabel11 = new javax.swing.JLabel();
        fecha1 = new rojeru_san.rsdate.RSDateChooser();
        fecha2 = new rojeru_san.rsdate.RSDateChooser();
        buscarButton = new RSMaterialComponent.RSButtonIconShadow();
        numCot = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        switchFecha = new RSMaterialComponent.RSCheckBoxMaterial();
        limpiarButton = new RSComponentShade.RSButtonRippleShade();
        excelButton = new RSComponentShade.RSButtonRippleShade();
        rSButtonRippleShade3 = new RSComponentShade.RSButtonRippleShade();
        panelResultados = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new rojerusan.RSTableMetro();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(153, 195, 236));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Buscar Comunicaciones por Cliente / Cot");

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/chat-26_64x64.png"))); // NOI18N

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/archive-3_icon-icons.com_65954.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addContainerGap(117, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel9))
                .addGap(0, 1, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(20, 20, 20))
        );

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Cliente:");

        clienteTxt.setEditable(false);
        clienteTxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        clienteTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        clienteTxt.setToolTipText("Presione F1 o la Lupa para buscar listado de Clientes");
        clienteTxt.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        clienteTxt.setOpaque(false);
        clienteTxt.setSelectionColor(new java.awt.Color(161, 54, 48));
        clienteTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clienteTxtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                clienteTxtFocusLost(evt);
            }
        });
        clienteTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                clienteTxtMouseExited(evt);
            }
        });
        clienteTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                clienteTxtKeyReleased(evt);
            }
        });

        rSButtonIconShadow1.setBackground(new java.awt.Color(192, 121, 117));
        rSButtonIconShadow1.setBackgroundHover(new java.awt.Color(161, 54, 48));
        rSButtonIconShadow1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rSButtonIconShadow1.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.SEARCH);
        rSButtonIconShadow1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonIconShadow1ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Usar Rango de Fecha");

        fecha1.setColorBackground(new java.awt.Color(161, 54, 48));
        fecha1.setColorButtonHover(new java.awt.Color(161, 54, 48));
        fecha1.setColorDiaActual(new java.awt.Color(77, 164, 98));
        fecha1.setColorForeground(new java.awt.Color(161, 54, 48));
        fecha1.setFormatoFecha("dd/MM/yyyy");
        fecha1.setPlaceholder("Fecha Inicial");

        fecha2.setColorBackground(new java.awt.Color(161, 54, 48));
        fecha2.setColorButtonHover(new java.awt.Color(161, 54, 48));
        fecha2.setColorDiaActual(new java.awt.Color(77, 164, 98));
        fecha2.setColorForeground(new java.awt.Color(161, 54, 48));
        fecha2.setFormatoFecha("dd/MM/yyyy");
        fecha2.setPlaceholder("Fecha Final");

        buscarButton.setBackground(new java.awt.Color(192, 121, 117));
        buscarButton.setToolTipText("Presione F1 o en la Lupa para Buscar las OT. listas");
        buscarButton.setBackgroundHover(new java.awt.Color(161, 54, 48));
        buscarButton.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.SEARCH);
        buscarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarButtonActionPerformed(evt);
            }
        });

        numCot.setEditable(false);
        numCot.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        numCot.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numCot.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        numCot.setOpaque(false);
        numCot.setSelectionColor(new java.awt.Color(161, 54, 48));
        numCot.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                numCotFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                numCotFocusLost(evt);
            }
        });
        numCot.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                numCotMouseExited(evt);
            }
        });
        numCot.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                numCotKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numCotKeyTyped(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("Seleccione # COT:");

        switchFecha.setForeground(new java.awt.Color(161, 54, 48));
        switchFecha.setText("No");
        switchFecha.setColorCheck(new java.awt.Color(161, 54, 48));
        switchFecha.setColorUnCheck(new java.awt.Color(192, 121, 117));
        switchFecha.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        switchFecha.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        switchFecha.setIsEffectRipple(false);
        switchFecha.setRippleColor(new java.awt.Color(161, 54, 48));
        switchFecha.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                switchFechaStateChanged(evt);
            }
        });

        limpiarButton.setBackground(new java.awt.Color(192, 121, 117));
        limpiarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/clean_icon_129230.png"))); // NOI18N
        limpiarButton.setText("Limpiar Campos");
        limpiarButton.setBgHover(new java.awt.Color(161, 54, 48));
        limpiarButton.setBgShadeHover(new java.awt.Color(161, 54, 48));
        limpiarButton.setEnabled(false);
        limpiarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarButtonActionPerformed(evt);
            }
        });

        excelButton.setBackground(new java.awt.Color(192, 121, 117));
        excelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Excel_2013_23480.png"))); // NOI18N
        excelButton.setText("Crear Archivo Excel");
        excelButton.setBgHover(new java.awt.Color(161, 54, 48));
        excelButton.setBgShadeHover(new java.awt.Color(161, 54, 48));
        excelButton.setEnabled(false);
        excelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelButtonActionPerformed(evt);
            }
        });

        rSButtonRippleShade3.setBackground(new java.awt.Color(143, 197, 156));
        rSButtonRippleShade3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/refresh_106672.png"))); // NOI18N
        rSButtonRippleShade3.setText("Actualizar Datos");
        rSButtonRippleShade3.setBgHover(new java.awt.Color(77, 164, 98));
        rSButtonRippleShade3.setBgShadeHover(new java.awt.Color(161, 54, 48));
        rSButtonRippleShade3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonRippleShade3ActionPerformed(evt);
            }
        });

        jScrollPane1.setPreferredSize(new java.awt.Dimension(1100, 100));

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Num Cot", "Cliente", "Vendedor", "Via Com.", "Descripción"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.setBackgoundHead(new java.awt.Color(161, 54, 48));
        tabla.setBackgoundHover(new java.awt.Color(161, 54, 48));
        tabla.setColorPrimaryText(new java.awt.Color(161, 54, 48));
        tabla.setColorSecondary(new java.awt.Color(255, 255, 255));
        tabla.setColorSecundaryText(new java.awt.Color(161, 54, 48));
        tabla.setEffectHover(true);
        tabla.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tabla.setFontHead(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        tabla.setFontRowHover(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tabla.setGridColor(new java.awt.Color(255, 255, 255));
        tabla.setSelectionBackground(new java.awt.Color(161, 54, 48));
        tabla.setShowVerticalLines(false);
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setMinWidth(110);
            tabla.getColumnModel().getColumn(0).setPreferredWidth(110);
            tabla.getColumnModel().getColumn(0).setMaxWidth(110);
            tabla.getColumnModel().getColumn(1).setMinWidth(140);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(140);
            tabla.getColumnModel().getColumn(1).setMaxWidth(140);
            tabla.getColumnModel().getColumn(2).setMinWidth(200);
            tabla.getColumnModel().getColumn(2).setPreferredWidth(200);
            tabla.getColumnModel().getColumn(2).setMaxWidth(200);
            tabla.getColumnModel().getColumn(3).setMinWidth(150);
            tabla.getColumnModel().getColumn(3).setPreferredWidth(150);
            tabla.getColumnModel().getColumn(3).setMaxWidth(150);
            tabla.getColumnModel().getColumn(4).setMinWidth(170);
            tabla.getColumnModel().getColumn(4).setPreferredWidth(170);
            tabla.getColumnModel().getColumn(4).setMaxWidth(170);
        }

        panelResultados.setViewportView(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel8)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(10, 10, 10)
                        .addComponent(clienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rSButtonIconShadow1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(numCot)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buscarButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(switchFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fecha1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(fecha2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rSButtonRippleShade3, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(excelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(limpiarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelResultados, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rSButtonIconShadow1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(buscarButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numCot, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(switchFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(1, 1, 1))
                        .addComponent(fecha1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(fecha2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(panelResultados, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(limpiarButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(excelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rSButtonRippleShade3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void clienteTxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_clienteTxtFocusGained
        clienteTxt.setBorder(new MatteBorder(0, 0, 2, 0, new Color(161, 54, 48)));
    }//GEN-LAST:event_clienteTxtFocusGained

    private void clienteTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_clienteTxtFocusLost
        clienteTxt.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));
    }//GEN-LAST:event_clienteTxtFocusLost

    private void clienteTxtMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clienteTxtMouseExited

        //
    }//GEN-LAST:event_clienteTxtMouseExited

    private void clienteTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clienteTxtKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            new listarClientes(2).setVisible(true);
        }
        /*
        else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            String texto = clienteTxt.getText();
            Cliente cliente = new Cliente();
            int rsp = cliente.buscarNombre(texto);
            if (rsp == 1) {
                clienteTxt.setText(cliente.getNombre1());
            } else {
                boolean llave = cliente.ComprobarNumeros(texto);
                if (llave == true) {
                    int id = Integer.parseInt(texto);
                    cliente.setID(id);
                    int rsp2 = cliente.buscarId();
                    if (rsp2 == 1) {
                        clienteTxt.setText(cliente.getNombre1());

                    } else {
                        new rojerusan.RSNotifyFade("¡¡CLIENTE NO ENCONTRADO!!", "No se encontraron coincidencias con el valor ingresado", 3, RSNotifyFade.PositionNotify.BottomRight, RSNotifyFade.TypeNotify.ERROR).setVisible(true);
                        clienteTxt.requestFocus();

                    }
                } else {
                    new rojerusan.RSNotifyFade("¡¡CLIENTE NO ENCONTRADO!!", "No se encontraron coincidencias con el valor ingresado", 3, RSNotifyFade.PositionNotify.BottomRight, RSNotifyFade.TypeNotify.ERROR).setVisible(true);
                    clienteTxt.requestFocus();

                }

            }
        }*/
    }//GEN-LAST:event_clienteTxtKeyReleased

    private void rSButtonIconShadow1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonIconShadow1ActionPerformed
        new listarClientes(3).setVisible(true);
    }//GEN-LAST:event_rSButtonIconShadow1ActionPerformed

    private void buscarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarButtonActionPerformed
        String temp = SQLcliente.equals("todos") ? "ninguno" : SQLcliente;
        lcd = new listarCotDespacho(this, temp);
        lcd.setVisible(true);
    }//GEN-LAST:event_buscarButtonActionPerformed

    private void numCotFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numCotFocusGained
        numCot.setBorder(new MatteBorder(0, 0, 2, 0, new Color(161, 54, 48)));
    }//GEN-LAST:event_numCotFocusGained

    private void numCotFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numCotFocusLost
        numCot.setBorder(new MatteBorder(0, 0, 1, 0, Color.BLACK));
    }//GEN-LAST:event_numCotFocusLost

    private void numCotMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_numCotMouseExited

        //
    }//GEN-LAST:event_numCotMouseExited

    private void numCotKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numCotKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            lcd.setVisible(true);
        }
    }//GEN-LAST:event_numCotKeyReleased

    private void numCotKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numCotKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_numCotKeyTyped

    private void switchFechaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_switchFechaStateChanged
        if (switchFecha.isSelected() == true) {
            //swtichFecha.setSelected(false);
            switchFecha.setText("Si");
            fecha1.setColorForeground(new Color(161, 54, 48));
            fecha2.setColorForeground(new Color(161, 54, 48));
        } else {
            //swtichFecha.setSelected(true);
            switchFecha.setText("No");
            fecha1.setColorForeground(Color.white);
            fecha2.setColorForeground(Color.white);
        }
    }//GEN-LAST:event_switchFechaStateChanged

    private void limpiarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarButtonActionPerformed
        int rsp = JOptionPane.showConfirmDialog(null, "¿Si acepta perderá los datos mostrados?", "Resetear Campos", JOptionPane.OK_CANCEL_OPTION);
        if (rsp == 0) {
            limpiarCampos();
            limpiarTabla();
        }
    }//GEN-LAST:event_limpiarButtonActionPerformed

    private void rSButtonRippleShade3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonRippleShade3ActionPerformed
        if (switchFecha.isSelected()) {// Si trabajaremos con fechas
            if (validarFechas()) {
                iniciarBusqueda();
                cargarDatosconFecha();
            } else {
                JOptionPane.showMessageDialog(clienteTxt, "Fecha Inicial debe ser Menor a Fecha Final");
            }
        } else { // no trabajaremos con fechas
            iniciarBusqueda();
            cargarDatosSinFechas();
        }
        contarResultados();
    }//GEN-LAST:event_rSButtonRippleShade3ActionPerformed

    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked

    }//GEN-LAST:event_tablaMouseClicked

    private void excelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelButtonActionPerformed
            if(tabla.getRowCount() < 1){
            JOptionPane.showMessageDialog(null, "Debe existir al menos 1 resultado");
        }else{
              new Thread(this::mostrarCarga).start();
            new Thread(this::exportar).start();
              
            }
            
       
    }//GEN-LAST:event_excelButtonActionPerformed
private void mostrarCarga(){
    carga.setVisible(true);
}
private void ocultarCarga(){
    carga.setVisible(false);
}
private void exportar(){
     try {
          new exportarExcel().Exportar(tabla, "Reporte por Cliente");
          new Thread(this::ocultarCarga).start();
        } catch (IOException ex) {
            Logger.getLogger(panelBuscarComunicacionesFechas.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(numCot, "Error Exportando a Excel\n" + ex);
        }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private RSMaterialComponent.RSButtonIconShadow buscarButton;
    public static javax.swing.JTextField clienteTxt;
    private RSComponentShade.RSButtonRippleShade excelButton;
    private rojeru_san.rsdate.RSDateChooser fecha1;
    private rojeru_san.rsdate.RSDateChooser fecha2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private RSComponentShade.RSButtonRippleShade limpiarButton;
    private static javax.swing.JTextField numCot;
    private javax.swing.JScrollPane panelResultados;
    private RSMaterialComponent.RSButtonIconShadow rSButtonIconShadow1;
    private RSComponentShade.RSButtonRippleShade rSButtonRippleShade3;
    private RSMaterialComponent.RSCheckBoxMaterial switchFecha;
    private rojerusan.RSTableMetro tabla;
    // End of variables declaration//GEN-END:variables

    private void actualizarDatos() {
        panelResultados.setVisible(false);
    }

    private void limpiarCampos() {
        clienteTxt.setText("");
        numCot.setText("");
        switchFecha.setSelected(false);
        fecha1.setDatoFecha(new Date());
        fecha2.setDatoFecha(new Date());
        panelResultados.setVisible(false);
        limpiarTabla();
        panelResultados.setVisible(false);
        
        excelButton.setEnabled(false);
        limpiarButton.setEnabled(false);
    }

    private void limpiarTabla() {
        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        modelo.setRowCount(0);
    }

    

    public static void setNumCot(String numCotx) {
        numCot.setText(numCotx);
        SQLnumCot = numCotx;
        c = new Cotizacion().buscarNumCot(numCotx);
    }

    public static void setCotizacion(Cotizacion cx) {
        c = cx;
        setNumCot(c.getNumeroCot());
        setCliente(c.getCliente());
    }

    public static void setCliente(Cliente cx) {
        cliente = cx;
        setCliente(cliente.getNombre1());
    }
public static void setCliente(String cliente) {
        clienteTxt.setText(cliente);
        SQLcliente = cliente;
    }
    private boolean validarFechas() {
        boolean llave = false;
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        String fecha1x = sdf.format(fecha1.getDatoFecha());
        String fecha2x = sdf.format(fecha2.getDatoFecha());
        int dias = new RestarFechas().RestarFechas(fecha1x, fecha2x);
        if (dias >= 0) {
            llave = true;
        }

        return llave;
    }

    private void cargarDatosconFecha() {

        try (Connection con = new Conectar("rstcot").getCon()) {
            if (clienteTxt.getText().length() > 0 && numCot.getText().length() == 0) {
                if (switchFecha.isSelected()) {
                  SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                  String fecha1Temp = sdf.format(fecha1.getDatoFecha());
                  String fecha2xTemp = sdf.format(fecha2.getDatoFecha());
                  
                  String sql = "select * from comunicacion where idCliente = " + cliente.getID()
                          +" and fecha between '"+fecha1Temp+"' and '"+fecha2xTemp+"'" ;
                  DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
                PreparedStatement pst = con.prepareStatement(sql);
                ResultSet rs = pst.executeQuery();
                vaciarTabla();
                while (rs.next()) {
                    String fecha = rs.getString("fecha");
                Cotizacion c;
                String cliente = "";
                String numCot = "";
                String tipoComunicacion = rs.getString("tipoComunicacion");
                String descripcion = rs.getString("descripcion");
                String vendedor="";

                if (rs.getString("tipo").equalsIgnoreCase("Solicitud")) {
                    Solicitud s = new Solicitud().buscarID(rs.getInt("idCot"));
                    numCot = s.getId() + "";
                    cliente = new Cliente().buscarId(s.getIdCliente()).getNombre1();
                    vendedor= s.getVendedor();
                } else {
                    if (rs.getString("tipo").equalsIgnoreCase("Cotización")) {
                        c = new Cotizacion().buscarID(rs.getInt("idCot"));
                        cliente = c.getPresupuesto().getCliente();
                        numCot = c.getNumeroCot() + "";
                        vendedor = c.getResponsable();
                    } else {
                        if (rs.getString("tipo").equalsIgnoreCase("Despacho")) {
                            Despacho d = new Despacho().buscarID(rs.getInt("idCot"));
                            cliente = d.getCotizacion().getPresupuesto().getCliente();
                            numCot = d.getNumeroGuia();
                            vendedor=d.getVendedor();
                        }
                    }
                }
                    
                    modelo.addRow(new Object[]{
                        fecha, numCot, cliente, vendedor, tipoComunicacion, descripcion
                    });

                }
                pst.close();
                rs.close();

                  
                } 
            } else {
                if (numCot.getText().length() > 0) {
                    if (switchFecha.isSelected()) {
                        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                  String fecha1Temp = sdf.format(fecha1.getDatoFecha());
                  String fecha2xTemp = sdf.format(fecha2.getDatoFecha());
                  
                  String sql = "select * from comunicacion where idCot = " + c.getID()
                          +" and fecha between '"+fecha1Temp+"' and '"+fecha2xTemp+"'" ;
                  DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();

                PreparedStatement pst = con.prepareStatement(sql);
                ResultSet rs = pst.executeQuery();
                vaciarTabla();
                while (rs.next()) {
                     String fecha = rs.getString("fecha");
                Cotizacion c;
                String cliente = "";
                String numCot = "";
                String tipoComunicacion = rs.getString("tipoComunicacion");
                String descripcion = rs.getString("descripcion");
                String vendedor="";

                if (rs.getString("tipo").equalsIgnoreCase("Solicitud")) {
                    Solicitud s = new Solicitud().buscarID(rs.getInt("idCot"));
                    numCot = s.getId() + "";
                    cliente = new Cliente().buscarId(s.getIdCliente()).getNombre1();
                    vendedor= s.getVendedor();
                } else {
                    if (rs.getString("tipo").equalsIgnoreCase("Cotización")) {
                        c = new Cotizacion().buscarID(rs.getInt("idCot"));
                        cliente = c.getPresupuesto().getCliente();
                        numCot = c.getNumeroCot() + "";
                        vendedor = c.getResponsable();
                    } else {
                        if (rs.getString("tipo").equalsIgnoreCase("Despacho")) {
                            Despacho d = new Despacho().buscarID(rs.getInt("idCot"));
                            cliente = d.getCotizacion().getPresupuesto().getCliente();
                            numCot = d.getNumeroGuia();
                            vendedor=d.getVendedor();
                        }
                    }
                }
                    modelo.addRow(new Object[]{
                        fecha, numCot, cliente, vendedor, tipoComunicacion, descripcion
                    });

                }
                pst.close();
                rs.close();
                    } 
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }

    private void cargarDatosSinFechas() {
        try (Connection con = new Conectar("rstcot").getCon()) {
            if (clienteTxt.getText().length() > 0 && numCot.getText().length() == 0) {
                String sql = "select * from comunicacion where idCliente = " + cliente.getID();
                DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
                PreparedStatement pst = con.prepareStatement(sql);
                ResultSet rs = pst.executeQuery();
                vaciarTabla();
                while (rs.next()) {
                    String fecha = rs.getString("fecha");
                Cotizacion c;
                String cliente = "";
                String numCot = "";
                String tipoComunicacion = rs.getString("tipoComunicacion");
                String descripcion = rs.getString("descripcion");
                String vendedor="";

                if (rs.getString("tipo").equalsIgnoreCase("Solicitud")) {
                    Solicitud s = new Solicitud().buscarID(rs.getInt("idCot"));
                    numCot = s.getId() + "";
                    cliente = new Cliente().buscarId(s.getIdCliente()).getNombre1();
                    vendedor= s.getVendedor();
                } else {
                    if (rs.getString("tipo").equalsIgnoreCase("Cotización")) {
                        c = new Cotizacion().buscarID(rs.getInt("idCot"));
                        cliente = c.getPresupuesto().getCliente();
                        numCot = c.getNumeroCot() + "";
                        vendedor = c.getResponsable();
                    } else {
                        if (rs.getString("tipo").equalsIgnoreCase("Despacho")) {
                            Despacho d = new Despacho().buscarID(rs.getInt("idCot"));
                            cliente = d.getCotizacion().getPresupuesto().getCliente();
                            numCot = d.getNumeroGuia();
                            vendedor=d.getVendedor();
                        }else {
                            if(rs.getString("tipo").equalsIgnoreCase("Cliente")){
                                numCot= "-";
                                Cliente cx = new Cliente().buscarId(rs.getInt("idCliente"));
                                cliente = cx.getNombre1();
                                vendedor = rs.getString("vendedor");
                            }  
                            
                        }
                    }
                }
                    modelo.addRow(new Object[]{
                        fecha, numCot, cliente, vendedor, tipoComunicacion, descripcion
                    });

                }
                pst.close();
                rs.close();

            } else {
                if (numCot.getText().length() > 0) {
                    String sql = "select * from comunicacion where idCot = " + c.getID();
                    DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();

                    PreparedStatement pst = con.prepareStatement(sql);
                    ResultSet rs = pst.executeQuery();
                    vaciarTabla();
                    while (rs.next()) {
                        String fecha = rs.getString("fecha");
                Cotizacion c;
                String cliente = "";
                String numCot = "";
                String tipoComunicacion = rs.getString("tipoComunicacion");
                String descripcion = rs.getString("descripcion");
                String vendedor="";

                if (rs.getString("tipo").equalsIgnoreCase("Solicitud")) {
                    Solicitud s = new Solicitud().buscarID(rs.getInt("idCot"));
                    numCot = s.getId() + "";
                    cliente = new Cliente().buscarId(s.getIdCliente()).getNombre1();
                    vendedor= s.getVendedor();
                } else {
                    if (rs.getString("tipo").equalsIgnoreCase("Cotización")) {
                        c = new Cotizacion().buscarID(rs.getInt("idCot"));
                        cliente = c.getPresupuesto().getCliente();
                        numCot = c.getNumeroCot() + "";
                        vendedor = c.getResponsable();
                    } else {
                        if (rs.getString("tipo").equalsIgnoreCase("Despacho")) {
                            Despacho d = new Despacho().buscarID(rs.getInt("idCot"));
                            cliente = d.getCotizacion().getPresupuesto().getCliente();
                            numCot = d.getNumeroGuia();
                            vendedor=d.getVendedor();
                        }else {
                            if(rs.getString("tipo").equalsIgnoreCase("Cliente")){
                                numCot= "-";
                                Cliente cx = new Cliente().buscarId(rs.getInt("idCliente"));
                                cliente = cx.getNombre1();
                                vendedor = rs.getString("vendedor");
                            }  
                            
                        }
                    }
                }
                        modelo.addRow(new Object[]{
                            fecha, numCot, cliente, vendedor, tipoComunicacion, descripcion
                        });

                    }
                    pst.close();
                    rs.close();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }

    private void vaciarTabla() {
        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        modelo.setRowCount(0);
    }

    private void iniciarBusqueda() {
       panelResultados.setVisible(true);
       excelButton.setEnabled(true);
       limpiarButton.setEnabled(true);
    }

    private void contarResultados() {
        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        if(modelo.getRowCount() == 0){
            modelo.addRow(new Object[]{
            "","","Sin Resultados","","",""
            });
            
        }
    
    }
}
