/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panels;

import Clases.Cliente;
import Clases.Conectar;
import Clases.Cotizacion;
import Clases.Despacho;
import Clases.Log;
import Clases.RestarFechas;
import Clases.ScrollSens;
import Clases.Solicitud;
import Clases.exportarExcel;
import Ventanas.cargando;
import VentanasRST.listarCotDespacho;
import static VentanasRST.newDespacho.numCot;
import java.awt.Color;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author soporte
 */
public class panelBuscarComunicacionesVendedor extends javax.swing.JPanel {


    listarCotDespacho lcd;
    cargando carga = new cargando();

    // Parametros a usar para el filtrado de Datos
    static String SQLcliente = "todos";
    static String SQLnumCot = "todos";
    String SQLvendedor = "todos";
    String SQLtipoComunicacion = "todos";
    String SQLfecha1 = "0", SQLfecha2 = "0";

    public panelBuscarComunicacionesVendedor() {
        initComponents();
        ScrollSens s = new ScrollSens(jScrollPane1);
        s.aumentarSens(35);
        actualizarDatos();
        fecha1.setDatoFecha(new Date());
        fecha2.setDatoFecha(new Date());
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        vendedorCombo = new RSMaterialComponent.RSComboBox();
        jLabel11 = new javax.swing.JLabel();
        fecha1 = new rojeru_san.rsdate.RSDateChooser();
        fecha2 = new rojeru_san.rsdate.RSDateChooser();
        swtichFecha = new RSMaterialComponent.RSCheckBoxMaterial();
        limpiarButton = new RSComponentShade.RSButtonRippleShade();
        excelButton = new RSComponentShade.RSButtonRippleShade();
        rSButtonRippleShade3 = new RSComponentShade.RSButtonRippleShade();
        panelResultados = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new rojerusan.RSTableMetro();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(153, 195, 236));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Buscar Comunicaciones por Vendedor");

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/chat-26_64x64.png"))); // NOI18N

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/archive-3_icon-icons.com_65954.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addContainerGap(147, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel9))
                .addGap(0, 1, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(20, 20, 20))
        );

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Vendedor:");

        vendedorCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos", " " }));
        vendedorCombo.setColorArrow(new java.awt.Color(161, 54, 48));
        vendedorCombo.setColorBorde(new java.awt.Color(161, 54, 48));
        vendedorCombo.setColorBoton(new java.awt.Color(153, 153, 153));
        vendedorCombo.setColorFondo(new java.awt.Color(161, 54, 48));
        vendedorCombo.setColorSeleccion(new java.awt.Color(161, 54, 48));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Usar Rango de Fecha");

        fecha1.setColorBackground(new java.awt.Color(161, 54, 48));
        fecha1.setColorButtonHover(new java.awt.Color(161, 54, 48));
        fecha1.setColorDiaActual(new java.awt.Color(0, 0, 204));
        fecha1.setColorForeground(new java.awt.Color(161, 54, 48));
        fecha1.setFormatoFecha("dd/MM/yyyy");
        fecha1.setPlaceholder("Fecha Inicial");

        fecha2.setColorBackground(new java.awt.Color(161, 54, 48));
        fecha2.setColorButtonHover(new java.awt.Color(161, 54, 48));
        fecha2.setColorDiaActual(new java.awt.Color(0, 0, 204));
        fecha2.setColorForeground(new java.awt.Color(161, 54, 48));
        fecha2.setFormatoFecha("dd/MM/yyyy");
        fecha2.setPlaceholder("Fecha Final");

        swtichFecha.setForeground(new java.awt.Color(161, 54, 48));
        swtichFecha.setText("No");
        swtichFecha.setColorCheck(new java.awt.Color(161, 54, 48));
        swtichFecha.setColorUnCheck(new java.awt.Color(192, 121, 117));
        swtichFecha.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        swtichFecha.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        swtichFecha.setIsEffectRipple(false);
        swtichFecha.setRippleColor(new java.awt.Color(161, 54, 48));
        swtichFecha.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                swtichFechaStateChanged(evt);
            }
        });

        limpiarButton.setBackground(new java.awt.Color(192, 121, 117));
        limpiarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/clean_icon_129230.png"))); // NOI18N
        limpiarButton.setText("Limpiar Campos");
        limpiarButton.setBgHover(new java.awt.Color(161, 54, 48));
        limpiarButton.setBgShadeHover(new java.awt.Color(161, 54, 48));
        limpiarButton.setEnabled(false);
        limpiarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarButtonActionPerformed(evt);
            }
        });

        excelButton.setBackground(new java.awt.Color(192, 121, 117));
        excelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Excel_2013_23480.png"))); // NOI18N
        excelButton.setText("Crear Archivo Excel");
        excelButton.setBgHover(new java.awt.Color(161, 54, 48));
        excelButton.setBgShadeHover(new java.awt.Color(161, 54, 48));
        excelButton.setEnabled(false);
        excelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelButtonActionPerformed(evt);
            }
        });

        rSButtonRippleShade3.setBackground(new java.awt.Color(143, 197, 156));
        rSButtonRippleShade3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/refresh_106672.png"))); // NOI18N
        rSButtonRippleShade3.setText("Actualizar Datos");
        rSButtonRippleShade3.setBgHover(new java.awt.Color(77, 164, 98));
        rSButtonRippleShade3.setBgShadeHover(new java.awt.Color(161, 54, 48));
        rSButtonRippleShade3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonRippleShade3ActionPerformed(evt);
            }
        });

        jScrollPane1.setPreferredSize(new java.awt.Dimension(1100, 100));

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Num Cot", "Cliente", "Via Com.", "Descripci√≥n"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.setBackgoundHead(new java.awt.Color(161, 54, 48));
        tabla.setBackgoundHover(new java.awt.Color(161, 54, 48));
        tabla.setColorPrimaryText(new java.awt.Color(161, 54, 48));
        tabla.setColorSecondary(new java.awt.Color(255, 255, 255));
        tabla.setColorSecundaryText(new java.awt.Color(161, 54, 48));
        tabla.setEffectHover(true);
        tabla.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tabla.setFontHead(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        tabla.setFontRowHover(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tabla.setGridColor(new java.awt.Color(255, 255, 255));
        tabla.setSelectionBackground(new java.awt.Color(161, 54, 48));
        tabla.setShowVerticalLines(false);
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setMinWidth(110);
            tabla.getColumnModel().getColumn(0).setPreferredWidth(110);
            tabla.getColumnModel().getColumn(0).setMaxWidth(110);
            tabla.getColumnModel().getColumn(1).setMinWidth(120);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(120);
            tabla.getColumnModel().getColumn(1).setMaxWidth(120);
            tabla.getColumnModel().getColumn(2).setMinWidth(230);
            tabla.getColumnModel().getColumn(2).setPreferredWidth(230);
            tabla.getColumnModel().getColumn(2).setMaxWidth(230);
            tabla.getColumnModel().getColumn(3).setMinWidth(150);
            tabla.getColumnModel().getColumn(3).setPreferredWidth(150);
            tabla.getColumnModel().getColumn(3).setMaxWidth(150);
        }

        panelResultados.setViewportView(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(vendedorCombo, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(fecha1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fecha2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(swtichFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 142, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rSButtonRippleShade3, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(excelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(limpiarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(panelResultados, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11)
                            .addComponent(swtichFecha, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(fecha1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(fecha2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vendedorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(panelResultados, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(limpiarButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(excelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rSButtonRippleShade3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked


    }//GEN-LAST:event_tablaMouseClicked

    private void swtichFechaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_swtichFechaStateChanged
        if (swtichFecha.isSelected() == true) {
            //swtichFecha.setSelected(false);
            swtichFecha.setText("Si");
            fecha1.setColorForeground(new Color(161, 54, 48));
            fecha2.setColorForeground(new Color(161, 54, 48));
        } else {
            //swtichFecha.setSelected(true);
            swtichFecha.setText("No");
            fecha1.setColorForeground(Color.white);
            fecha2.setColorForeground(Color.white);
        }
    }//GEN-LAST:event_swtichFechaStateChanged

    private void limpiarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarButtonActionPerformed
        int rsp = JOptionPane.showConfirmDialog(null, "¬øSi acepta perder√° los datos mostrados?", "Resetear Campos", JOptionPane.OK_CANCEL_OPTION);
        if (rsp == 0) {
            limpiarCampos();
            limpiarTabla();
        }
    }//GEN-LAST:event_limpiarButtonActionPerformed

    private void rSButtonRippleShade3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonRippleShade3ActionPerformed

        try {
            if (!swtichFecha.isSelected()) {
                //vaciarTabla();
                buscarDatosSinFechas();
                excelButton.setEnabled(true);
                limpiarButton.setEnabled(true);
            } else {
                if (swtichFecha.isSelected() && validarFechas()) {
                    //vaciarTabla();
                    excelButton.setEnabled(true);
                    limpiarButton.setEnabled(true);
                    buscarDatos();
                } else {
                    JOptionPane.showMessageDialog(numCot, "Fecha Inicial no debe ser mayor a fecha Final");
                    limpiarCampos();
                }
            }
        } catch (Exception e) {
            Logger.getLogger(Log.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(numCot, "Fecha Inicial no debe ser mayor a fecha Final");
        }


    }//GEN-LAST:event_rSButtonRippleShade3ActionPerformed

    private void excelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelButtonActionPerformed

        if (tabla.getRowCount() < 1) {
            JOptionPane.showMessageDialog(null, "Debe existir al menos 1 resultado");
        } else {

            new Thread(this::mostrarCarga).start();
            new Thread(this::exportar).start();
        }


    }//GEN-LAST:event_excelButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private RSComponentShade.RSButtonRippleShade excelButton;
    private rojeru_san.rsdate.RSDateChooser fecha1;
    private rojeru_san.rsdate.RSDateChooser fecha2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private RSComponentShade.RSButtonRippleShade limpiarButton;
    private javax.swing.JScrollPane panelResultados;
    private RSComponentShade.RSButtonRippleShade rSButtonRippleShade3;
    private RSMaterialComponent.RSCheckBoxMaterial swtichFecha;
    private rojerusan.RSTableMetro tabla;
    private RSMaterialComponent.RSComboBox vendedorCombo;
    // End of variables declaration//GEN-END:variables

    private void actualizarDatos() {
        panelResultados.setVisible(false);
        llenarVendedores();

    }

    private void exportar() {
        exportarExcel ee = new exportarExcel();
        try {
            ee.Exportar(tabla, "Reporte por Vendedor");
            new Thread(this::ocultarCarga).start();
        } catch (IOException ex) {
            Logger.getLogger(panelBuscarComunicacionesVendedor.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(numCot, "Error Exportando a Excel\n" + ex);
        }
    }

    private void limpiarCampos() {

        excelButton.setEnabled(false);
        limpiarButton.setEnabled(false);
        vendedorCombo.setSelectedIndex(0);

        swtichFecha.setSelected(false);
        //fecha1.setColorForeground(Color.white);
        //fecha2.setColorForeground(Color.white);
        fecha1.setDatoFecha(new Date());
        fecha2.setDatoFecha(new Date());
        panelResultados.setVisible(false);
        limpiarTabla();

    }

    private void limpiarTabla() {
        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        modelo.setRowCount(0);
    }

    private String generateWhereSQL() {
        String sqlWhere = "";
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        String fecha1x = sdf.format(fecha1.getDatoFecha());
        String fecha2x = sdf.format(fecha2.getDatoFecha());

        if (vendedorCombo.getSelectedItem().equals("Todos")) {
            if (swtichFecha.isSelected()) {
                if (validarFechas() == true) {
                    if (fecha1x.equals(fecha2x)) {
                        sqlWhere = "where fecha = '" + fecha1x + "'";
                    } else {
                        sqlWhere = "where fecha between '" + fecha1x + "" + "' and '" + fecha2x + "' ";
                    }

                } else {
                    JOptionPane.showMessageDialog(numCot, "Fecha Inicial no debe ser mayor a fecha Final");
                }
            } else {
                sqlWhere = " ";
            }

        } else {
            String vendedor = vendedorCombo.getSelectedItem().toString();
            if (swtichFecha.isSelected()) {
                if (validarFechas() == true) {
                    if (fecha1x.equals(fecha2x)) {
                        sqlWhere = "where vendedor='" + vendedor + "' and fecha = '" + fecha1x + "'";
                    } else {
                        sqlWhere = "where vendedor='" + vendedor + "' and  fecha between '" + fecha1x + "" + "' and '" + fecha2x + "' ";
                    }

                    sqlWhere = "where vendedor='" + vendedor + "' and fecha between '" + fecha1x + "" + "' and '" + fecha2x + "' ";
                } else {
                    JOptionPane.showMessageDialog(numCot, "Fecha Inicial no debe ser mayor a fecha Final");
                }
            } else {
                sqlWhere = "where vendedor='" + vendedor + "'";
            }
        }

        return sqlWhere;
    }

    public void llenarVendedores() {
        ArrayList<String> lista = (ArrayList) new Log().listarxNivel(1).clone();
        vendedorCombo.removeAllItems();
        vendedorCombo.addItem("Todos");
        for (String vendedor : lista) {
            vendedorCombo.addItem(vendedor);
        }
    }

    private boolean validarFechas() {
        boolean llave = false;
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        String fecha1x = sdf.format(fecha1.getDatoFecha());
        String fecha2x = sdf.format(fecha2.getDatoFecha());
        int dias = new RestarFechas().RestarFechas(fecha1x, fecha2x);
        if (dias >= 0) {
            llave = true;
        }

        return llave;
    }

    private void buscarDatos() {
        panelResultados.setVisible(true);

        String where = generateWhereSQL();
        String sql = "select * from comunicacion " + where;
        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        try (Connection con = new Conectar("rstcot").getCon()) {
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            vaciarTabla();
            while (rs.next()) {
                String fecha = rs.getString("fecha");
                Cotizacion c;
                String cliente = "";
                String numCot = "";
                String tipoComunicacion = rs.getString("tipoComunicacion");
                String descripcion = rs.getString("descripcion");

                if (rs.getString("tipo").equalsIgnoreCase("Solicitud")) {
                    Solicitud s = new Solicitud().buscarID(rs.getInt("idCot"));
                    numCot = s.getId() + "";
                    cliente = new Cliente().buscarId(s.getIdCliente()).getNombre1();

                } else {
                    if (rs.getString("tipo").equalsIgnoreCase("Cotizaci√≥n")) {
                        c = new Cotizacion().buscarID(rs.getInt("idCot"));
                        cliente = c.getPresupuesto().getCliente();
                        numCot = c.getNumeroCot() + "";
                    } else {
                        if (rs.getString("tipo").equalsIgnoreCase("Despacho")) {
                            Despacho d = new Despacho().buscarID(rs.getInt("idCot"));
                            cliente = d.getCotizacion().getPresupuesto().getCliente();
                            numCot = d.getNumeroGuia();
                        }else {
                            if(rs.getString("tipo").equalsIgnoreCase("Cliente")){
                                numCot= "-";
                                Cliente cx = new Cliente().buscarId(rs.getInt("idCliente"));
                                cliente = cx.getNombre1();
                                
                            }  
                            
                        }
                    }
                }
                modelo.addRow(new Object[]{
                    fecha, numCot, cliente, tipoComunicacion, descripcion
                });

            }
            pst.close();
            rs.close();
        } catch (Exception e) {
            Logger.getLogger(panelBuscarComunicacionesVendedor.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(numCot, e);
        }
    }

    private void buscarDatosSinFechas() {
        panelResultados.setVisible(true);

        String where = generateWhereSQL();
        String sql = "select * from comunicacion " + where;
        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        try (Connection con = new Conectar("rstcot").getCon()) {
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            vaciarTabla();
            while (rs.next()) {
                String fecha = rs.getString("fecha");
                Cotizacion c;
                String cliente = "";
                String numCot = "";
                String tipoComunicacion = rs.getString("tipoComunicacion");
                String descripcion = rs.getString("descripcion");

                if (rs.getString("tipo").equalsIgnoreCase("Solicitud")) {
                    Solicitud s = new Solicitud().buscarID(rs.getInt("idCot"));
                    numCot = s.getId() + "";
                    cliente = new Cliente().buscarId(s.getIdCliente()).getNombre1();

                } else {
                    if (rs.getString("tipo").equalsIgnoreCase("Cotizaci√≥n")) {
                        c = new Cotizacion().buscarID(rs.getInt("idCot"));
                        cliente = c.getPresupuesto().getCliente();
                        numCot = c.getNumeroCot() + "";
                    } else {
                        if (rs.getString("tipo").equalsIgnoreCase("Despacho")) {
                            Despacho d = new Despacho().buscarID(rs.getInt("idCot"));
                            cliente = d.getCotizacion().getPresupuesto().getCliente();
                            numCot = d.getNumeroGuia();
                        }else {
                            if(rs.getString("tipo").equalsIgnoreCase("Cliente")){
                                numCot= "-";
                                Cliente cx = new Cliente().buscarId(rs.getInt("idCliente"));
                                cliente = cx.getNombre1();
                                
                            }  
                            
                        }
                    }
                }

                modelo.addRow(new Object[]{
                    fecha, numCot, cliente, tipoComunicacion, descripcion
                });

            }
            pst.close();
            rs.close();
        } catch (Exception e) {
            Logger.getLogger(panelBuscarComunicacionesVendedor.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(numCot, e);
        }
    }

    private void vaciarTabla() {
        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        modelo.setRowCount(0);
    }

    private void mostrarCarga() {
        carga.setVisible(true);
    }

    private void ocultarCarga() {
        carga.setVisible(false);
    }
}
